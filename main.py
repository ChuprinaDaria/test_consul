import os
import re
import asyncio
from datetime import datetime, timedelta
from collections import defaultdict
import pytz
from telethon import TelegramClient, events
from telethon.tl.custom import Button
from dotenv import load_dotenv

from parse_like_whore import parse_slot_message, parse_slots_gone_message
from db import (
    init_db,
    is_processed,
    is_content_processed_recently,
    get_sent_message_id_by_city,
    save_sent_message,
    mark_processed_with_stats,
    mark_gone_processed,
    get_statistics_data
)
from botstatisticshandler import BotStatisticsHandler

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ / –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è ===
load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session = os.getenv("SESSION_NAME")
bot_token = os.getenv("BOT_TOKEN")
channel_id_raw = os.getenv("BOT_USERNAME")
source_user = os.getenv("SOURCE_USER")

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∞–Ω–∞–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
CANADA_TZ = pytz.timezone("America/Toronto")

# –ö–æ—Ä–µ–∫—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ channel_id
try:
    if channel_id_raw.startswith('-') or channel_id_raw.lstrip('-').isdigit():
        channel_id = int(channel_id_raw)
        print(f"üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —á–∏—Å–ª–æ–≤–∏–π ID –∫–∞–Ω–∞–ª—É: {channel_id}")
    else:
        channel_id = channel_id_raw
        print(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é username –∫–∞–Ω–∞–ª—É: @{channel_id}")
except Exception:
    channel_id = channel_id_raw
    print(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —è–∫ —Ä—è–¥–æ–∫: {channel_id}")

# –ö–ª—ñ—î–Ω—Ç–∏
user_client = TelegramClient(session, api_id, api_hash)
bot_client = TelegramClient('bot', api_id, api_hash)
stats_handler = BotStatisticsHandler()

init_db()

# ============================================================
# –•–ï–õ–ü–ï–†–ò
# ============================================================


async def handle_slots_gone(event):
    """
    –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "‚ùå –ù–∞ –∂–∞–ª—å..." ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–∏—Ö—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    –ë–ï–ó —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    full_place, city, time_display = parse_slots_gone_message(event.raw_text)
    if not city:
        return False  # —Ü–µ –Ω–µ "–∑–∞–π–Ω—è—Ç–æ"-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    # –§–æ—Ä–º—É—î–º–æ —á–∏—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ë–ï–ó –ø—Ä–µ–º—ñ—É–º-–ø—Ä–∏–ø–∏—Å–∫–∏
    clean_text = f"‚ùå **–ù–∞ –∂–∞–ª—å, —Å–ª–æ—Ç—ñ–≤ —É {full_place} –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î!**\n\n‚è±Ô∏è –°–ª–æ—Ç–∏ –±—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ **{time_display}**"

    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¢–ò–•–û (silent=True)
        await bot_client.send_message(channel_id, clean_text, silent=True, parse_mode='markdown')
        print(f"üîï –¢–∏—Ö–∞ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤ —É {city}: {time_display}")
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–∏—Ö—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –¥–ª—è {city}: {e}")

    # –ü–æ–∑–Ω–∞—á–∞—î–º–æ "–∑–∞–π–Ω—è—Ç–æ"-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ
    try:
        mark_gone_processed("", event.id)
    except Exception:
        pass
    return True


def extract_slot_info(original_text, parsed_msg):
    """–í–∏—Ç—è–≥—É—î —ñ–Ω—Ñ–æ –ø—Ä–æ —Å–ª–æ—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    city = service = None
    slots_count = 0
    available_dates = []

    # –ú—ñ—Å—Ç–æ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if "—Å–ª–æ—Ç–∏ –≤ " in parsed_msg:
        city_match = re.search(r'—Å–ª–æ—Ç–∏ –≤ (.+?)!', parsed_msg)
        if city_match:
            city = city_match.group(1).strip()

    # –ü–æ—Å–ª—É–≥–∞ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    service_match = re.search(r'üî∏ –ü–æ—Å–ª—É–≥–∞: (.+)', original_text)
    if service_match:
        service = service_match.group(1).strip()

    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤ —Ç–∞ –¥–∞—Ç–∏ –∑ —á–∞—Å—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    times_section = re.search(r'üïê \*\*–î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏:\*\* (.+)', parsed_msg)
    if times_section:
        times_text = times_section.group(1)
        # –†–∞—Ö—É—î–º–æ –≤—Å—ñ —á–∞—Å–∏
        all_times = re.findall(r'\d{2}:\d{2}', times_text)
        slots_count = len(all_times)
        
        # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞—Ç–∏
        dates = re.findall(r'\*\*(\d{2}\.\d{2}\.\d{4})\*\*:', times_text)
        available_dates = dates

    return city, service, slots_count, available_dates


def get_hourly_city_stats(days=30):
    """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ–¥–∏–Ω–∞—Ö —Ç–∞ –º—ñ—Å—Ç–∞—Ö"""
    data = get_statistics_data(days)
    
    hour_counts = defaultdict(int)
    city_counts = defaultdict(int)
    
    for city, service, slots_count, canada_time_str, timestamp in data:
        if city:
            city_counts[city] += 1
            
        # –û–±—Ä–æ–±–∫–∞ —á–∞—Å—É
        try:
            if canada_time_str:
                if 'T' in canada_time_str:
                    ct = datetime.fromisoformat(canada_time_str.replace('Z', '+00:00'))
                else:
                    ct = datetime.strptime(canada_time_str, '%Y-%m-%d %H:%M:%S')
            else:
                utc_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                utc_time = pytz.UTC.localize(utc_time)
                ct = utc_time.astimezone(CANADA_TZ)
            
            hour_counts[ct.hour] += 1
        except:
            continue
    
    # –¢–æ–ø-3 –≥–æ–¥–∏–Ω–∏ —Ç–∞ –º—ñ—Å—Ç–∞
    top_hours = sorted(hour_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    top_cities = sorted(city_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    
    return top_hours, top_cities

def generate_content_hash_improved(text, parsed_msg):
    """
    –ü–æ–ª—ñ–ø—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ö–µ—à—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.
    –í—Ä–∞—Ö–æ–≤—É—î —Ç—ñ–ª—å–∫–∏ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: –º—ñ—Å—Ç–æ + –¥–∞—Ç–∏ + —á–∞—Å–∏
    """
    import hashlib
    
    city = ""
    dates_times = ""
    
    # –í–∏—Ç—è–≥—É—î–º–æ –º—ñ—Å—Ç–æ
    if "—Å–ª–æ—Ç–∏ –≤ " in parsed_msg:
        city_match = re.search(r'—Å–ª–æ—Ç–∏ –≤ (.+?)!', parsed_msg)
        if city_match:
            city = city_match.group(1).strip()
    
    # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å–∏ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    date_sections = re.findall(r'(\d{2}\.\d{2}\.\d{4}):\s*([0-9:\s]+)', text)
    if date_sections:
        # –°–æ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
        sorted_dates = sorted(date_sections)
        dates_times = ";".join([f"{date}:{times.strip()}" for date, times in sorted_dates])
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à
    content_for_hash = f"{city}_{dates_times}"
    return hashlib.md5(content_for_hash.encode()).hexdigest()

# --- –ú—ñ–∫—Ä–æ-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –±–µ–∑ –ª—ñ–∑—Ç–∏ —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–µ—Ç–æ–¥–∏ StatisticsModule ---
_announced_today = set()  # {(YYYY-MM-DD, hour)}

async def notify_upcoming_slots_task():
    """
    –†–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ: —è–∫—â–æ –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è "—Ç–æ–ø-–≥–æ–¥–∏–Ω–∞",
    —à–ª–µ–º–æ —Ç–∏—Ö–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏–º–∏ –º—ñ—Å—Ç–∞–º–∏.
    """
    global _announced_today

    while True:
        try:
            now = datetime.now(CANADA_TZ)
            top_hours, top_cities = get_hourly_city_stats(days=30)

            # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äî —Å–ø–∏–º–æ
            if not top_hours or not top_cities:
                await asyncio.sleep(60)
                continue

            # –ù–∞—Å—Ç—É–ø–Ω–∞ –≥–æ–¥–∏–Ω–∞, —è–∫—â–æ –∑–∞—Ä–∞–∑ –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –≥–æ–¥–∏–Ω–∏ (55-59 —Ö–≤) ‚Äî –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑–∞ 5 —Ö–≤
            # –∞–±–æ, –∑–∞–≥–∞–ª—å–Ω—ñ—à–µ: —è–∫—â–æ now.minute –º—ñ–∂ 55..59 —ñ –Ω–∞—Å—Ç—É–ø–Ω–∞ –≥–æ–¥–∏–Ω–∞ —É —Ç–æ–ø-–≥–æ–¥–∏–Ω–∞—Ö
            if 55 <= now.minute <= 59:
                next_hour = (now.hour + 1) % 24
                if any(h == next_hour for (h, c) in top_hours):
                    key = (now.strftime('%Y-%m-%d'), next_hour)
                    if key not in _announced_today:
                        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç (—á–µ—Ä–µ–∑ –∫–æ–º—É)
                        cities_list = ", ".join(city for city, _ in top_cities[:2])  # –¢–æ–ø-2 –º—ñ—Å—Ç–∞
                        text = f"üîî **–ó–∞ 5 —Ö–≤–∏–ª–∏–Ω –º–æ–∂–ª–∏–≤—ñ —Å–ª–æ—Ç–∏ –≤ {cities_list}**\n\nüìä _(–ó–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è)_"

                        try:
                            await bot_client.send_message(channel_id, text, silent=True, parse_mode='markdown')
                            print(f"üîï –¢–∏—Ö–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –Ω–∞ {next_hour:02d}:00 ‚Äî {cities_list}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–∏—Ö–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {e}")

                        _announced_today.add(key)

            # –°–∫–∏–¥–∞—î–º–æ –º–∞—Ä–∫–µ—Ä–∏ –Ω–∞ –Ω–æ–≤–∏–π –¥–µ–Ω—å
            if now.hour == 0 and now.minute == 0:
                _announced_today = set()

        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ notify_upcoming_slots_task: {e}")
        finally:
            await asyncio.sleep(60)


# ============================================================
# –•–ï–ù–î–õ–ï–† –ù–û–í–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ (–≤—ñ–¥ –¥–∂–µ—Ä–µ–ª–∞)
# ============================================================

@user_client.on(events.NewMessage(from_users=source_user))
async def handler(event):
    print("\n" + "="*60)
    print("üî• –ù–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –û–¢–†–ò–ú–ê–ù–û!")
    print("="*60)

    try:
        msg_id = event.id
        sender = await event.get_sender()
        sender_name = getattr(sender, 'username', '–ù–µ–≤—ñ–¥–æ–º–æ')

        print(f"üì® ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {msg_id}")
        print(f"üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: @{sender_name}")
        print(f"üìù –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        print("-" * 40)
        print(event.raw_text[:500] + ("..." if len(event.raw_text) > 500 else ""))
        print("-" * 40)

        # 0) –Ø–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ "—Å–ª–æ—Ç–∏ –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ" ‚Äî –æ–±—Ä–æ–±–ª—è—î–º–æ –π–æ–≥–æ —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ
        handled_gone = await handle_slots_gone(event)
        if handled_gone:
            return

        # 1) –ê–Ω—Ç–∏–¥—É–±–ª—å –ø–æ msg_id
        if is_processed(msg_id):
            print("‚≠ï –ü–†–û–ü–£–©–ï–ù–û: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ")
            return

        # 2) –ü–∞—Ä—Å–∏–º–æ "–ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!"
        print("üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        parsed_msg, buttons, content_hash = parse_slot_message(event.raw_text)

        if parsed_msg and buttons and content_hash:
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫—Ä–∞—â–∏–π —Ö–µ—à
            improved_hash = generate_content_hash_improved(event.raw_text, parsed_msg)
            print(f"üîç –ü–æ–ª—ñ–ø—à–µ–Ω–∏–π —Ö–µ—à: {improved_hash[:10]}...")
            
            # –ê–Ω—Ç–∏–¥—É–±–ª—å –∑–∞ 60 —Ö–≤–∏–ª–∏–Ω (–±—É–ª–æ 30)
            if is_content_processed_recently(improved_hash, 60):
                print("‚≠ï –ü–†–û–ü–£–©–ï–ù–û: –¢–æ–π —Å–∞–º–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É")
                mark_processed_with_stats(msg_id, improved_hash)
                return

            print("‚úÖ –£–°–ü–Ü–®–ù–û –†–û–ó–ü–ê–†–°–ï–ù–û!")
            print("üìÑ –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
            print("-" * 40)
            print(parsed_msg)
            print("-" * 40)

            print("üìò –ö–Ω–æ–ø–∫–∏:")
            for btn in buttons:
                print(f"   ‚Ä¢ {btn.text} ‚Üí {btn.url}")

            # 4) –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –∫–∞–Ω–∞–ª
            print("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤ –∫–∞–Ω–∞–ª...")
            try:
                sent = await bot_client.send_message(
                    channel_id,
                    parsed_msg,
                    buttons=buttons,
                    parse_mode='markdown'
                )

                # 5) –î–∞–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                city, service, slots_count, available_dates = extract_slot_info(event.raw_text, parsed_msg)

                # 6) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑ –Ω–æ–≤–∏–º —Ö–µ—à–µ–º
                mark_processed_with_stats(
                    msg_id=msg_id,
                    content_hash=improved_hash,  # ‚Üê –ó–ú–Ü–ù–ï–ù–û
                    city=city,
                    service=service,
                    slots_count=slots_count,
                    available_dates=available_dates
                )

                # 7) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id
                save_sent_message(improved_hash, sent.id)  # ‚Üê –ó–ú–Ü–ù–ï–ù–û

                print(f"üéâ –£–°–ü–Ü–®–ù–û –í–Ü–î–ü–†–ê–í–õ–ï–ù–û –≤ –∫–∞–Ω–∞–ª @{channel_id}!")
                print(f"üìä –î–æ–¥–∞–Ω–æ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {city}, {service}, {slots_count} —Å–ª–æ—Ç—ñ–≤")

            except Exception as send_error:
                print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {send_error}")

        else:
            print("‚ö†Ô∏è –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ª–æ—Ç–∏ –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
            print("üí° –û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: \"–ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!\"")

        # 8) –ù–∞–æ—Å—Ç–∞–Ω–æ–∫ ‚Äî –≤—ñ–¥–º—ñ—á—É—î–º–æ msg_id, —â–æ–± –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –æ–±—Ä–æ–±–ª—è—Ç–∏
        try:
            mark_processed_with_stats(msg_id, None)
        except Exception:
            pass

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")
        import traceback
        traceback.print_exc()

    print("="*60)


# ============================================================
# –ë–û–¢-–ö–û–ú–ê–ù–î–ò
# ============================================================

@bot_client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    await stats_handler.handle_start_command(event)

@bot_client.on(events.CallbackQuery)
async def callback_handler(event):
    await stats_handler.handle_stats_callback(event)


# ============================================================
# –ó–ê–ü–£–°–ö
# ============================================================

async def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –î–õ–Ø –ü–ï–†–ï–°–ò–õ–ê–ù–ù–Ø –°–õ–û–¢–Ü–í")
    print("="*50)

    try:
        # –ü—ñ–¥–∫–ª—é—á–∞–Ω–Ω—è
        print("üìÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram...")
        await user_client.start()
        await bot_client.start(bot_token=bot_token)

        me = await user_client.get_me()
        bot = await bot_client.get_me()

        print(f"‚úÖ USER –∫–ª—ñ—î–Ω—Ç: {me.first_name} (ID: {me.id})")
        print(f"‚úÖ BOT –∫–ª—ñ—î–Ω—Ç: {bot.first_name} (@{bot.username})")

        # –î–∂–µ—Ä–µ–ª–æ
        try:
            source_entity = await user_client.get_entity(source_user)
            print(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ: {getattr(source_entity, 'first_name', 'N/A')} (@{getattr(source_entity, 'username', 'N/A')})")
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ {source_user}: {e}")
            return

        # –ö–∞–Ω–∞–ª
        try:
            channel_entity = await bot_client.get_entity(channel_id)
            channel_title = getattr(channel_entity, 'title', '–ù–µ–≤—ñ–¥–æ–º–æ')
            print(f"‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {channel_title} (@{channel_id})")
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
            return

        print("\n" + "="*50)
        print("üéØ –í–°–ï –ì–û–¢–û–í–û! –ß–µ–∫–∞—é –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–ª–æ—Ç–∏...")
        print("üí° –ë–æ—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏ –¢–Ü–õ–¨–ö–ò –ù–û–í–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–∏—Ä–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
        print("üîï –¢–∏—Ö—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤–º–∏–∫–Ω–µ–Ω–æ (–∑–∞ 5 —Ö–≤ –¥–æ –Ω–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–æ—ó –≥–æ–¥–∏–Ω–∏)")
        print("üì± –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        print("="*50)

        # –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –∑ —Ç–∏—Ö–∏–º–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏
        asyncio.create_task(notify_upcoming_slots_task())

        # –°–ª—É—Ö–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await user_client.run_until_disconnected()

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        import traceback
        traceback.print_exc()