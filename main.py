import os
import re
import asyncio
import sqlite3
from datetime import datetime, timedelta

import pytz
from telethon import TelegramClient, events
from telethon.tl.custom import Button
from dotenv import load_dotenv

from parse_like_whore import parse_slot_message, parse_slots_gone_message
from db import (
    init_db,
    is_processed,
    is_content_processed_recently,
    get_sent_message_id_by_city,
    save_sent_message,
    mark_processed,  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ, —â–æ–± –≤—ñ–¥–º—ñ—á–∞—Ç–∏ "–∑–∞–π–Ω—è—Ç–æ"-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
)
from botstatisticshandler import BotStatisticsHandler, mark_processed_with_stats

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ / –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è ===
load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session = os.getenv("SESSION_NAME")
bot_token = os.getenv("BOT_TOKEN")
channel_id_raw = os.getenv("BOT_USERNAME")
source_user = os.getenv("SOURCE_USER")

# –û–¥–Ω–∞–∫–æ–≤–µ —ñ–º'—è –ë–î —É –≤—Å—ñ—Ö –º–æ–¥—É–ª—è—Ö
DB_FILE = "processed_messages.db"

# –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∞–Ω–∞–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
CANADA_TZ = pytz.timezone("America/Toronto")

# –ö–æ—Ä–µ–∫—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ channel_id
try:
    if channel_id_raw.startswith('-') or channel_id_raw.lstrip('-').isdigit():
        channel_id = int(channel_id_raw)
        print(f"üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —á–∏—Å–ª–æ–≤–∏–π ID –∫–∞–Ω–∞–ª—É: {channel_id}")
    else:
        channel_id = channel_id_raw
        print(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é username –∫–∞–Ω–∞–ª—É: @{channel_id}")
except Exception:
    channel_id = channel_id_raw
    print(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —è–∫ —Ä—è–¥–æ–∫: {channel_id}")

# –ö–ª—ñ—î–Ω—Ç–∏
user_client = TelegramClient(session, api_id, api_hash)
bot_client = TelegramClient('bot', api_id, api_hash)
stats_handler = BotStatisticsHandler()

init_db()

# ============================================================
# –•–ï–õ–ü–ï–†–ò
# ============================================================

async def handle_slots_gone(event):
    """
    –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "‚ùå –ù–∞ –∂–∞–ª—å..." ‚Äì –∑–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª—ñ –∑–∞ –º—ñ—Å—Ç–æ–º
    —ñ —Ä–µ–¥–∞–≥—É—î–º–æ –π–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –ø—Ä–µ–º—ñ—É–º-—Ö–≤–æ—Å—Ç–∞.
    """
    full_place, city, minutes_alive = parse_slots_gone_message(event.raw_text)
    if not city:
        return False  # —Ü–µ –Ω–µ "–∑–∞–π–Ω—è—Ç–æ"-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    prev_id = get_sent_message_id_by_city(city)
    if not prev_id:
        print(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º—ñ—Å—Ç–∞: {city}")
        # –í—Å–µ –æ–¥–Ω–æ –ø–æ–º—ñ—á–∞—î–º–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ, —â–æ–± –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç–∏—Å—å
        try:
            mark_processed(event.id, None)
        except Exception:
            pass
        return True

    new_text = (
        f"‚ùå –ù–∞ –∂–∞–ª—å, —É—Å—ñ —Å–ª–æ—Ç–∏ —É {full_place} –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ!\n"
        f"–°–ª–æ—Ç–∏ –±—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º {minutes_alive} —Ö–≤–∏–ª–∏–Ω."
    )

    try:
        await bot_client.edit_message(channel_id, prev_id, new_text)
        print(f"‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {city}")
    except Exception as e:
        # ‚Üê —Ü—è —Å—Ç—Ä—ñ—á–∫–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É –ø—Ä–æ–±–ª–µ–º
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è {city}: {e}")

    # –ü–æ–∑–Ω–∞—á–∞—î–º–æ "–∑–∞–π–Ω—è—Ç–æ"-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ
    try:
        mark_processed(event.id, None)
    except Exception:
        pass
    return True


def extract_slot_info(text, parsed_msg):
    """–í–∏—Ç—è–≥—É—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ—É –ø—Ä–æ —Å–ª–æ—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    city = None
    service = None
    slots_count = 0
    available_dates = []

    # –ú—ñ—Å—Ç–æ
    location_match = re.search(r'üî∏ (–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ .+|–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ .+)', text)
    if location_match:
        city = (location_match.group(1)
                .replace("–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ ", "")
                .replace("–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ ", "")
                .strip())

    # –ü–æ—Å–ª—É–≥–∞
    service_match = re.search(r'üî∏ –ü–æ—Å–ª—É–≥–∞: (.+)', text)
    if service_match:
        service = service_match.group(1).strip()

    # –î–∞—Ç–∏/—á–∞—Å–∏
    date_sections = re.findall(
        r'üìÖ –°–ª–æ—Ç–∏ —è–∫—ñ –±—É–ª–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ:\s*(\d{2}\.\d{2}\.\d{4}):(.*?)(?=üìÖ|‚ö†Ô∏è|üî•|$)',
        text, re.DOTALL
    )

    for date, times_text in date_sections:
        times = re.findall(r'\d{2}:\d{2}', times_text)
        if times:
            slots_count += len(times)
            available_dates.append(date)

    return city, service, slots_count, available_dates


# --- –ú—ñ–∫—Ä–æ-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –±–µ–∑ –ª—ñ–∑—Ç–∏ —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –º–µ—Ç–æ–¥–∏ StatisticsModule ---
def compute_top_hours_and_cities(days: int = 30, top_n: int = 3):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î (top_hours, top_cities) –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ `days` –¥–Ω—ñ–≤.
    top_hours: —Å–ø–∏—Å–æ–∫ (hour, count)
    top_cities: —Å–ø–∏—Å–æ–∫ (city, count)
    """
    since_utc = datetime.now(pytz.UTC) - timedelta(days=days)

    hour_counts = {}
    city_counts = {}

    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        # –ë–µ—Ä–µ–º–æ canada_time —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º–æ timestamp (UTC) ‚Üí Canada TZ
        cursor.execute("""
            SELECT city, canada_time, timestamp
            FROM processed
            WHERE city IS NOT NULL
              AND (timestamp >= ?)
        """, (since_utc.strftime('%Y-%m-%d %H:%M:%S'),))

        rows = cursor.fetchall()

    for city, canada_time_str, timestamp_str in rows:
        if not city:
            continue

        # –ú—ñ—Å—Ç–æ
        city_counts[city] = city_counts.get(city, 0) + 1

        # –ß–∞—Å (–≥–æ–¥–∏–Ω–∞ –≤ –ö–∞–Ω–∞–¥—ñ)
        try:
            if canada_time_str:
                # ISO –∞–±–æ "%Y-%m-%d %H:%M:%S"
                if 'T' in canada_time_str:
                    ct = datetime.fromisoformat(canada_time_str.replace('Z', '+00:00'))
                else:
                    ct = datetime.strptime(canada_time_str, '%Y-%m-%d %H:%M:%S')
            else:
                utc_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                utc_time = pytz.UTC.localize(utc_time)
                ct = utc_time.astimezone(CANADA_TZ)
            hour = ct.hour
            hour_counts[hour] = hour_counts.get(hour, 0) + 1
        except Exception:
            continue

    top_hours = sorted(hour_counts.items(), key=lambda x: x[1], reverse=True)[:top_n]
    top_cities = sorted(city_counts.items(), key=lambda x: x[1], reverse=True)[:top_n]
    return top_hours, top_cities


_announced_today = set()  # {(YYYY-MM-DD, hour)}

async def notify_upcoming_slots_task():
    """
    –†–∞–∑ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ: —è–∫—â–æ –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è ‚Äú—Ç–æ–ø-–≥–æ–¥–∏–Ω–∞‚Äù,
    —à–ª–µ–º–æ —Ç–∏—Ö–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏–º–∏ –º—ñ—Å—Ç–∞–º–∏.
    """
    global _announced_today

    while True:
        try:
            now = datetime.now(CANADA_TZ)
            top_hours, top_cities = compute_top_hours_and_cities(days=30, top_n=3)

            # –Ø–∫—â–æ –Ω–µ–º–∞ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äì —Å–ø–∏–º–æ
            if not top_hours or not top_cities:
                await asyncio.sleep(60)
                continue

            # –ù–∞—Å—Ç—É–ø–Ω–∞ –≥–æ–¥–∏–Ω–∞, —è–∫—â–æ –∑–∞—Ä–∞–∑ –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –≥–æ–¥–∏–Ω–∏ (55-59 —Ö–≤) ‚Äî –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑–∞ 5 —Ö–≤
            # –∞–±–æ, –∑–∞–≥–∞–ª—å–Ω—ñ—à–µ: —è–∫—â–æ now.minute –º—ñ–∂ 55..59 —ñ –Ω–∞—Å—Ç—É–ø–Ω–∞ –≥–æ–¥–∏–Ω–∞ —É —Ç–æ–ø-–≥–æ–¥–∏–Ω–∞—Ö
            if 55 <= now.minute <= 59:
                next_hour = (now.hour + 1) % 24
                if any(h == next_hour for (h, c) in top_hours):
                    key = (now.strftime('%Y-%m-%d'), next_hour)
                    if key not in _announced_today:
                        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç (—á–µ—Ä–µ–∑ –∫–æ–º—É)
                        cities_list = ", ".join(city for city, _ in top_cities)
                        text = f"üîî –Ñ –∑–∞ 5 —Ö–≤ –º–æ–∂–ª–∏–≤—ñ —Å–ª–æ—Ç–∏ –≤ {cities_list} (–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è)."

                        try:
                            await bot_client.send_message(channel_id, text, silent=True)
                            print(f"üîï –¢–∏—Ö–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –Ω–∞ {next_hour:02d}:00 ‚Äî {cities_list}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–∏—Ö–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: {e}")

                        _announced_today.add(key)

            # –°–∫–∏–¥–∞—î–º–æ –º–∞—Ä–∫–µ—Ä–∏ –Ω–∞ –Ω–æ–≤–∏–π –¥–µ–Ω—å
            if now.hour == 0 and now.minute == 0:
                _announced_today = set()

        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ notify_upcoming_slots_task: {e}")
        finally:
            await asyncio.sleep(60)


# ============================================================
# –•–ï–ù–î–õ–ï–† –ù–û–í–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ (–≤—ñ–¥ –¥–∂–µ—Ä–µ–ª–∞)
# ============================================================

@user_client.on(events.NewMessage(from_users=source_user))
async def handler(event):
    print("\n" + "="*60)
    print("üì• –ù–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –û–¢–†–ò–ú–ê–ù–û!")
    print("="*60)

    try:
        msg_id = event.id
        sender = await event.get_sender()
        sender_name = getattr(sender, 'username', '–ù–µ–≤—ñ–¥–æ–º–æ')

        print(f"üì® ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {msg_id}")
        print(f"üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: @{sender_name}")
        print(f"üìù –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        print("-" * 40)
        print(event.raw_text[:500] + ("..." if len(event.raw_text) > 500 else ""))
        print("-" * 40)

        # 0) –Ø–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ "—Å–ª–æ—Ç–∏ –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ" ‚Äì –æ–±—Ä–æ–±–ª—è—î–º–æ –π–æ–≥–æ —ñ –∑–∞–≤–µ—Ä—à—É—î–º–æ
        handled_gone = await handle_slots_gone(event)
        if handled_gone:
            return

        # 1) –ê–Ω—Ç–∏–¥—É–±–ª—å –ø–æ msg_id
        if is_processed(msg_id):
            print("‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù–û: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ")
            return

        # 2) –ü–∞—Ä—Å–∏–º–æ "–ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!"
        print("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        parsed_msg, buttons, content_hash = parse_slot_message(event.raw_text)

        if parsed_msg and buttons and content_hash:
            # 3) –ê–Ω—Ç–∏–¥—É–±–ª—å –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É (–∑–∞ 30 —Ö–≤)
            if is_content_processed_recently(content_hash, 30):
                print("‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù–û: –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É–±–ª—ñ–∫—É–≤–∞–≤—Å—è –ø—Ä–æ—Ç—è–≥–æ–º –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 30 —Ö–≤–∏–ª–∏–Ω")
                print("üí° –°–ª–æ—Ç –º–æ–∂–µ –∑'—è–≤–∏—Ç–∏—Å—è –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ 30+ —Ö–≤–∏–ª–∏–Ω —è–∫—â–æ —Ö—Ç–æ—Å—å –≤—ñ–¥–º–æ–≤–∏—Ç—å—Å—è")
                # –≤—Å–µ –æ–¥–Ω–æ –ø–æ–º—ñ—Ç–∏–º–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑–∞ msg_id, —â–æ–± –Ω–µ –¥—å–æ—Ä–≥–∞—Ç–∏ –ø–æ –∫–æ–ª—É
                try:
                    mark_processed(msg_id, content_hash)
                except Exception:
                    pass
                return

            print("‚úÖ –£–°–ü–Ü–®–ù–û –†–û–ó–ü–ê–†–°–ï–ù–û!")
            print("üìÑ –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
            print("-" * 40)
            print(parsed_msg)
            print("-" * 40)

            print("üîò –ö–Ω–æ–ø–∫–∏:")
            for btn in buttons:
                print(f"   ‚Ä¢ {btn.text} ‚Üí {btn.url}")

            # 4) –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –∫–∞–Ω–∞–ª
            print("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤ –∫–∞–Ω–∞–ª...")
            try:
                sent = await bot_client.send_message(
                    channel_id,
                    parsed_msg,
                    buttons=buttons,
                    parse_mode='markdown'
                )

                # 5) –î–∞–Ω—ñ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                city, service, slots_count, available_dates = extract_slot_info(event.raw_text, parsed_msg)

                # 6) –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é (–≤—Å—Ç–∞–≤–∫–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
                mark_processed_with_stats(
                    msg_id=msg_id,
                    content_hash=content_hash,
                    city=city,
                    service=service,
                    slots_count=slots_count,
                    available_dates=available_dates
                )

                # 7) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (‚Äù‚ùå –ù–∞ –∂–∞–ª—å‚Ä¶‚Äù)
                save_sent_message(content_hash, sent.id)

                print(f"üéâ –£–°–ü–Ü–®–ù–û –í–Ü–î–ü–†–ê–í–õ–ï–ù–û –≤ –∫–∞–Ω–∞–ª @{channel_id}!")
                print(f"üìä –î–æ–¥–∞–Ω–æ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {city}, {service}, {slots_count} —Å–ª–æ—Ç—ñ–≤")

            except Exception as send_error:
                print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {send_error}")

        else:
            print("‚ö†Ô∏è –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–ª–æ—Ç–∏ –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
            print("üí° –û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: \"–ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!\"")

        # 8) –ù–∞–æ—Å—Ç–∞–Ω–æ–∫ ‚Äî –≤—ñ–¥–º—ñ—Ç–∏–º–æ msg_id, —â–æ–± –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –æ–±—Ä–æ–±–ª—è—Ç–∏
        try:
            mark_processed(msg_id, None)
        except Exception:
            pass

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")
        import traceback
        traceback.print_exc()

    print("="*60)


# ============================================================
# –ë–û–¢-–ö–û–ú–ê–ù–î–ò
# ============================================================

@bot_client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    await stats_handler.handle_start_command(event)

@bot_client.on(events.CallbackQuery)
async def callback_handler(event):
    await stats_handler.handle_stats_callback(event)


# ============================================================
# –ó–ê–ü–£–°–ö
# ============================================================

async def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –î–õ–Ø –ü–ï–†–ï–°–ò–õ–ê–ù–ù–Ø –°–õ–û–¢–Ü–í")
    print("="*50)

    try:
        # –ü—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è
        print("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram...")
        await user_client.start()
        await bot_client.start(bot_token=bot_token)

        me = await user_client.get_me()
        bot = await bot_client.get_me()

        print(f"‚úÖ USER –∫–ª—ñ—î–Ω—Ç: {me.first_name} (ID: {me.id})")
        print(f"‚úÖ BOT –∫–ª—ñ—î–Ω—Ç: {bot.first_name} (@{bot.username})")

        # –î–∂–µ—Ä–µ–ª–æ
        try:
            source_entity = await user_client.get_entity(source_user)
            print(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ: {getattr(source_entity, 'first_name', 'N/A')} (@{getattr(source_entity, 'username', 'N/A')})")
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ {source_user}: {e}")
            return

        # –ö–∞–Ω–∞–ª
        try:
            channel_entity = await bot_client.get_entity(channel_id)
            channel_title = getattr(channel_entity, 'title', '–ù–µ–≤—ñ–¥–æ–º–æ')
            print(f"‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {channel_title} (@{channel_id})")
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
            return

        print("\n" + "="*50)
        print("üéØ –í–°–ï –ì–û–¢–û–í–û! –ß–µ–∫–∞—é –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–ª–æ—Ç–∏...")
        print("üí° –ë–æ—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏ –¢–Ü–õ–¨–ö–ò –ù–û–í–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–∏—Ä–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
        print("üîï –¢–∏—Ö—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –≤–º–∏–∫–Ω–µ–Ω–æ (–∑–∞ 5 —Ö–≤ –¥–æ –Ω–∞–π—ñ–º–æ–≤—ñ—Ä–Ω—ñ—à–æ—ó –≥–æ–¥–∏–Ω–∏)")
        print("üì± –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        print("="*50)

        # –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –∑ —Ç–∏—Ö–∏–º–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏
        asyncio.create_task(notify_upcoming_slots_task())

        # –°–ª—É—Ö–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await user_client.run_until_disconnected()

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –∑–∞–ø—É—Å–∫—É: {e}")
        import traceback
        traceback.print_exc()
