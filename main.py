import os
from telethon import TelegramClient, events
from telethon.tl.custom import Button
from dotenv import load_dotenv
from parse_like_whore import parse_slot_message
from db import init_db, is_processed, mark_processed, is_content_processed
import asyncio

load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session = os.getenv("SESSION_NAME")
bot_token = os.getenv("BOT_TOKEN")
channel_id_raw = os.getenv("BOT_USERNAME")
source_user = os.getenv("SOURCE_USER")

# –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ channel_id
try:
    if channel_id_raw.startswith('-') or channel_id_raw.lstrip('-').isdigit():
        channel_id = int(channel_id_raw)
        print(f"üìã –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —á–∏—Å–ª–æ–≤–∏–π ID –∫–∞–Ω–∞–ª—É: {channel_id}")
    else:
        channel_id = channel_id_raw
        print(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é username –∫–∞–Ω–∞–ª—É: @{channel_id}")
except:
    channel_id = channel_id_raw
    print(f"üìù –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —è–∫ —Ä—è–¥–æ–∫: {channel_id}")

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
user_client = TelegramClient(session, api_id, api_hash)
bot_client = TelegramClient('bot', api_id, api_hash)

init_db()

@user_client.on(events.NewMessage(from_users=source_user))
async def handler(event):
    print("\n" + "="*60)
    print("üì• –ù–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –û–¢–†–ò–ú–ê–ù–û!")
    print("="*60)

    try:
        msg_id = event.id
        sender = await event.get_sender()
        sender_name = getattr(sender, 'username', '–ù–µ–≤—ñ–¥–æ–º–æ')
        
        print(f"üì® ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {msg_id}")
        print(f"üë§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: @{sender_name}")
        print(f"üìù –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        print("-" * 40)
        print(event.raw_text[:500] + ("..." if len(event.raw_text) > 500 else ""))
        print("-" * 40)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
        if is_processed(msg_id):
            print("‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù–û: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ")
            return

        # –ü–∞—Ä—Å–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        print("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        parsed_msg, buttons, content_hash = parse_slot_message(event.raw_text)

        if parsed_msg and buttons and content_hash:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –¥—É–±–ª—é—î—Ç—å—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç
            if is_content_processed(content_hash):
                print("‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù–û: –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∂–µ –±—É–≤ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π")
                return
            
            print("‚úÖ –£–°–ü–Ü–®–ù–û –†–û–ó–ü–ê–†–°–ï–ù–û!")
            print("üìÑ –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
            print("-" * 40)
            print(parsed_msg)
            print("-" * 40)
            
            print("üîò –ö–Ω–æ–ø–∫–∏:")
            for btn in buttons:
                print(f"   ‚Ä¢ {btn.text} ‚Üí {btn.url}")

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –∫–∞–Ω–∞–ª
            print("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤ –∫–∞–Ω–∞–ª...")
            try:
                await bot_client.send_message(
                    channel_id, 
                    parsed_msg, 
                    buttons=buttons, 
                    parse_mode='markdown'
                )
                
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑ —Ö–µ—à–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç—É
                mark_processed(msg_id, content_hash)
                
                print(f"üéâ –£–°–ü–Ü–®–ù–û –í–Ü–î–ü–†–ê–í–õ–ï–ù–û –≤ –∫–∞–Ω–∞–ª @{channel_id}!")
                
            except Exception as send_error:
                print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {send_error}")
                
        else:
            print("‚ö†Ô∏è –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–ª–æ—Ç–∏ –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
            print("üí° –û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: \"–ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!\"")
    
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")
        import traceback
        traceback.print_exc()
    
    print("="*60)

async def main():
    print("üöÄ –ó–ê–ü–£–°–ö –ë–û–¢–ê –î–õ–Ø –ü–ï–†–ï–°–ò–õ–ê–ù–ù–Ø –°–õ–û–¢–Ü–í")
    print("="*50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤
        print("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram...")
        await user_client.start()
        await bot_client.start(bot_token=bot_token)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        me = await user_client.get_me()
        bot = await bot_client.get_me()
        
        print(f"‚úÖ USER –∫–ª—ñ—î–Ω—Ç: {me.first_name} (ID: {me.id})")
        print(f"‚úÖ BOT –∫–ª—ñ—î–Ω—Ç: {bot.first_name} (@{bot.username})")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∂–µ—Ä–µ–ª–æ
        try:
            source_entity = await user_client.get_entity(source_user)
            print(f"‚úÖ –î–∂–µ—Ä–µ–ª–æ: {source_entity.first_name} (@{source_entity.username})")
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ {source_user}: {e}")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞–Ω–∞–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        try:
            channel_entity = await bot_client.get_entity(channel_id)
            channel_title = getattr(channel_entity, 'title', '–ù–µ–≤—ñ–¥–æ–º–æ')
            print(f"‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {channel_title} (@{channel_id})")
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!")
            return
        
        print("\n" + "="*50)
        print("üéØ –í–°–ï –ì–û–¢–û–í–û! –ß–µ–∫–∞—é –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–ª–æ—Ç–∏...")
        print("üí° –ë–æ—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏ –¢–Ü–õ–¨–ö–ò –ù–û–í–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        print("üì± –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        print("="*50)
        
        # –°–ª—É—Ö–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await user_client.run_until_disconnected()
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –∑–∞–ø—É—Å–∫—É: {e}")
        import traceback
        traceback.print_exc()