import os
from telethon import TelegramClient
from dotenv import load_dotenv
import asyncio

load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session = os.getenv("SESSION_NAME")
bot_token = os.getenv("BOT_TOKEN")
channel_id_raw = os.getenv("BOT_USERNAME")

print("üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ù–ê–õ–£")
print("=" * 40)
print(f"–°–∏—Ä–∏–π channel_id –∑ .env: '{channel_id_raw}' (—Ç–∏–ø: {type(channel_id_raw)})")

# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
try:
    if channel_id_raw.startswith('-') or channel_id_raw.lstrip('-').isdigit():
        channel_id = int(channel_id_raw)
        print(f"‚úÖ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ –≤ —á–∏—Å–ª–æ: {channel_id} (—Ç–∏–ø: {type(channel_id)})")
    else:
        channel_id = channel_id_raw
        print(f"üìù –ó–∞–ª–∏—à–µ–Ω–æ —è–∫ —Ä—è–¥–æ–∫: {channel_id}")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")
    exit(1)

async def test_channel_access():
    # –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø
    user_client = TelegramClient(session, api_id, api_hash)
    bot_client = TelegramClient('bot', api_id, api_hash)
    
    await user_client.start()
    await bot_client.start(bot_token=bot_token)
    
    print(f"\nü§ñ –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É {channel_id}...")
    
    # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ USER –∫–ª—ñ—î–Ω—Ç–æ–º
    try:
        print("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ USER –∫–ª—ñ—î–Ω—Ç–æ–º...")
        user_entity = await user_client.get_entity(channel_id)
        print(f"‚úÖ USER –∑–Ω–∞–π—à–æ–≤: {getattr(user_entity, 'title', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –∫–∞–Ω–∞–ª—ñ
        try:
            participants = await user_client.get_participants(channel_id, limit=1)
            print(f"‚úÖ USER –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∫–∞–Ω–∞–ª—É")
        except Exception as e:
            print(f"‚ö†Ô∏è USER –Ω–µ –º–∞—î –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É: {e}")
            
    except Exception as e:
        print(f"‚ùå USER –Ω–µ –º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª: {e}")
        print("üí° –ú–æ–∂–ª–∏–≤–æ –≤–∏ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–∞–Ω–∞–ª—É")
        return
    
    # –¢–µ–ø–µ—Ä —Å–ø—Ä–æ–±—É—î–º–æ BOT –∫–ª—ñ—î–Ω—Ç–æ–º
    try:
        print("\n2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ BOT –∫–ª—ñ—î–Ω—Ç–æ–º...")
        bot_entity = await bot_client.get_entity(channel_id)
        print(f"‚úÖ BOT –∑–Ω–∞–π—à–æ–≤: {getattr(bot_entity, 'title', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
        
        # –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            test_msg = f"üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø—É - {asyncio.get_event_loop().time()}"
            await bot_client.send_message(channel_id, test_msg)
            print("‚úÖ BOT –º–æ–∂–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")
        except Exception as e:
            print(f"‚ùå BOT –Ω–µ –º–æ–∂–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            print("üí° –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –ø—Ä–∞–≤–∞–º–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
            
    except Exception as e:
        print(f"‚ùå BOT –Ω–µ –º–æ–∂–µ –∑–Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª: {e}")
        print("üí° –ë–æ—Ç –Ω–µ –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É –∞–±–æ –Ω–µ –º–∞—î –ø—Ä–∞–≤")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    print(f"\n3Ô∏è‚É£ –í—Å—ñ –≤–∞—à—ñ –∫–∞–Ω–∞–ª–∏:")
    print("-" * 30)
    async for dialog in user_client.iter_dialogs():
        if dialog.is_channel:
            print(f"üì¢ {dialog.name} (ID: {dialog.id})")
    
    await user_client.disconnect()
    await bot_client.disconnect()

if __name__ == "__main__":
    asyncio.run(test_channel_access())#