import sqlite3
from datetime import datetime, timedelta
from collections import defaultdict, Counter
import pytz
from telethon.tl.custom import Button
import re

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∞—à—É —ñ—Å–Ω—É—é—á—É –ë–î
DB_FILE = 'processed_messages.db'

class StatisticsModule:
    def __init__(self, db_path=DB_FILE):
        self.db_path = db_path
        self.canada_tz = pytz.timezone('America/Toronto')  # –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∞–Ω–∞–¥–∏
        self.init_statistics_tables()
    
    def init_statistics_tables(self):
        """–î–æ–¥–∞—î —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ—ó —Ç–∞–±–ª–∏—Ü—ñ processed (—è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î)
        try:
            cursor.execute('ALTER TABLE processed ADD COLUMN city TEXT')
        except sqlite3.OperationalError:
            pass  # –ö–æ–ª–æ–Ω–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î
            
        try:
            cursor.execute('ALTER TABLE processed ADD COLUMN service TEXT')
        except sqlite3.OperationalError:
            pass
            
        try:
            cursor.execute('ALTER TABLE processed ADD COLUMN slots_count INTEGER')
        except sqlite3.OperationalError:
            pass
            
        try:
            cursor.execute('ALTER TABLE processed ADD COLUMN available_dates TEXT')
        except sqlite3.OperationalError:
            pass
            
        try:
            cursor.execute('ALTER TABLE processed ADD COLUMN canada_time DATETIME')
        except sqlite3.OperationalError:
            pass
        
        # –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS button_clicks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                button_type TEXT,
                click_time DATETIME,
                canada_time DATETIME
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def update_processed_record(self, msg_id, city, service, slots_count, available_dates, content_hash):
        """–û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —á–∞—Å –≤ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∞–Ω–∞–¥–∏
        cursor.execute('SELECT timestamp FROM processed WHERE msg_id = ?', (msg_id,))
        result = cursor.fetchone()
        
        if result:
            # –ü–∞—Ä—Å–∏–º–æ —ñ—Å–Ω—É—é—á–∏–π timestamp
            timestamp_str = result[0]
            try:
                utc_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                utc_time = pytz.UTC.localize(utc_time)
                canada_time = utc_time.astimezone(self.canada_tz)
            except:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
                now_utc = datetime.now(pytz.UTC)
                canada_time = now_utc.astimezone(self.canada_tz)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
            cursor.execute('''
                UPDATE processed 
                SET city = ?, service = ?, slots_count = ?, available_dates = ?, canada_time = ?
                WHERE msg_id = ?
            ''', (city, service, slots_count, str(available_dates), canada_time.isoformat(), msg_id))
            
            conn.commit()
            conn.close()
            return True
        
        conn.close()
        return False
    
    def log_button_click(self, user_id, button_type):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        now_utc = datetime.now(pytz.UTC)
        canada_time = now_utc.astimezone(self.canada_tz)
        
        cursor.execute('''
            INSERT INTO button_clicks (user_id, button_type, click_time, canada_time)
            VALUES (?, ?, ?, ?)
        ''', (user_id, button_type, now_utc, canada_time))
        
        conn.commit()
        conn.close()
    
    def get_statistics(self, period='week'):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∑ —ñ—Å–Ω—É—é—á–æ—ó –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥
        now = datetime.now()
        if period == 'week':
            start_date = now - timedelta(days=7)
            period_name = "—Ç–∏–∂–¥–µ–Ω—å"
        elif period == 'month':
            start_date = now - timedelta(days=30)
            period_name = "–º—ñ—Å—è—Ü—å"
        elif period == 'year':
            start_date = now - timedelta(days=365)
            period_name = "—Ä—ñ–∫"
        else:
            start_date = now - timedelta(days=7)
            period_name = "—Ç–∏–∂–¥–µ–Ω—å"
        
        start_date_str = start_date.strftime('%Y-%m-%d %H:%M:%S')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ processed
        cursor.execute('''
            SELECT city, service, canada_time, slots_count, timestamp, content_hash 
            FROM processed 
            WHERE timestamp >= ? 
            AND city IS NOT NULL
            ORDER BY timestamp
        ''', (start_date_str,))
        
        slot_data = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫
        cursor.execute('''
            SELECT button_type, canada_time, user_id
            FROM button_clicks 
            WHERE click_time >= ?
            ORDER BY canada_time
        ''', (start_date_str,))
        
        click_data = cursor.fetchall()
        
        conn.close()
        
        return self.analyze_data(slot_data, click_data, period_name)
    
    def analyze_data(self, slot_data, click_data, period_name):
        """–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {
            'period': period_name,
            'total_messages': len(slot_data),
            'total_clicks': len(click_data),
            'cities_stats': defaultdict(int),
            'services_stats': defaultdict(int),
            'hourly_distribution': defaultdict(int),
            'daily_distribution': defaultdict(int),
            'total_slots': 0,
            'avg_slots_per_message': 0,
            'most_active_hours': [],
            'most_active_days': [],
            'click_stats': defaultdict(int)
        }
        
        if not slot_data:
            return self.format_empty_stats(period_name)
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Å–ª–æ—Ç–∏
        for city, service, canada_time_str, slots_count, timestamp, content_hash in slot_data:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å –∑ canada_time –∞–±–æ timestamp
            try:
                if canada_time_str:
                    if 'T' in canada_time_str:
                        canada_time = datetime.fromisoformat(canada_time_str.replace('Z', '+00:00'))
                    else:
                        canada_time = datetime.strptime(canada_time_str, '%Y-%m-%d %H:%M:%S')
                else:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ timestamp —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∞–Ω–∞–¥–∏
                    utc_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                    utc_time = pytz.UTC.localize(utc_time)
                    canada_time = utc_time.astimezone(self.canada_tz)
            except:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—å —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                continue
            
            if city:
                stats['cities_stats'][city] += 1
            if service:
                stats['services_stats'][service] += 1
            
            if slots_count:
                stats['total_slots'] += slots_count
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –≥–æ–¥–∏–Ω–∞—Ö (–∫–æ–ª–∏ –∑'—è–≤–ª—è–ª–∏—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
            hour = canada_time.hour
            stats['hourly_distribution'][hour] += 1
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è
            day_name = canada_time.strftime('%A')
            stats['daily_distribution'][day_name] += 1
        
        # –ê–Ω–∞–ª—ñ–∑ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫
        for button_type, click_time_str, user_id in click_data:
            stats['click_stats'][button_type] += 1
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
        if stats['total_messages'] > 0:
            stats['avg_slots_per_message'] = stats['total_slots'] / stats['total_messages']
        
        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –≥–æ–¥–∏–Ω–∏ (—Ç–æ–ø 3)
        stats['most_active_hours'] = sorted(
            stats['hourly_distribution'].items(), 
            key=lambda x: x[1], 
            reverse=True
        )[:3]
        
        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –¥–Ω—ñ (—Ç–æ–ø 3)
        stats['most_active_days'] = sorted(
            stats['daily_distribution'].items(), 
            key=lambda x: x[1], 
            reverse=True
        )[:3]
        
        return self.format_statistics(stats)
    
    def format_empty_stats(self, period_name):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}**

‚ùå –ó–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î

üîç –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
‚Ä¢ –ù–µ –±—É–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Å–ª–æ—Ç–∏
‚Ä¢ –ü–µ—Ä—ñ–æ–¥ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è

–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –±—ñ–ª—å—à–∏–π period –∞–±–æ –∑–∞—á–µ–∫–∞–π—Ç–µ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""

    def format_statistics(self, stats):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É –∫—Ä–∞—Å–∏–≤–∏–π —Ç–µ–∫—Å—Ç"""
        msg = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['period']}**

üìà **–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**
‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Å–ª–æ—Ç–∏: {stats['total_messages']}
‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤: {stats['total_slots']}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {stats['avg_slots_per_message']:.1f}
‚Ä¢ –ù–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫: {stats['total_clicks']}

üèôÔ∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—Ç–∞—Ö:**"""
        
        # –¢–æ–ø –º—ñ—Å—Ç
        top_cities = sorted(stats['cities_stats'].items(), key=lambda x: x[1], reverse=True)
        for i, (city, count) in enumerate(top_cities[:5], 1):
            percentage = (count / stats['total_messages']) * 100
            msg += f"\n{i}. {city}: {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ({percentage:.1f}%)"
        
        msg += f"\n\nüõ°Ô∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª—É–≥–∞—Ö:**"
        
        # –¢–æ–ø –ø–æ—Å–ª—É–≥
        top_services = sorted(stats['services_stats'].items(), key=lambda x: x[1], reverse=True)
        for i, (service, count) in enumerate(top_services[:3], 1):
            percentage = (count / stats['total_messages']) * 100
            msg += f"\n{i}. {service}: {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ({percentage:.1f}%)"
        
        msg += f"\n\nüïê **–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –≥–æ–¥–∏–Ω–∏ (—á–∞—Å –ö–∞–Ω–∞–¥–∏):**"
        
        for i, (hour, count) in enumerate(stats['most_active_hours'], 1):
            percentage = (count / stats['total_messages']) * 100
            msg += f"\n{i}. {hour:02d}:00-{hour+1:02d}:00: {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ({percentage:.1f}%)"
        
        msg += f"\n\nüìÖ **–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –¥–Ω—ñ —Ç–∏–∂–Ω—è:**"
        
        day_names = {
            'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫', 
            'Wednesday': '–°–µ—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä',
            'Friday': "–ü'—è—Ç–Ω–∏—Ü—è",
            'Saturday': '–°—É–±–æ—Ç–∞',
            'Sunday': '–ù–µ–¥—ñ–ª—è'
        }
        
        for i, (day, count) in enumerate(stats['most_active_days'], 1):
            percentage = (count / stats['total_messages']) * 100
            day_ua = day_names.get(day, day)
            msg += f"\n{i}. {day_ua}: {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ({percentage:.1f}%)"
        
        if stats['click_stats']:
            msg += f"\n\nüñ±Ô∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å:**"
            for button_type, count in stats['click_stats'].items():
                msg += f"\n‚Ä¢ {button_type}: {count} –Ω–∞—Ç–∏—Å–∫–∞–Ω—å"
        
        return msg
    
    def get_statistics_buttons(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        buttons = [
            [Button.callback("üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å", b"stats_week")],
            [Button.callback("üìÜ –ó–∞ –º—ñ—Å—è—Ü—å", b"stats_month")],
            [Button.callback("üóìÔ∏è –ó–∞ —Ä—ñ–∫", b"stats_year")],
            [Button.callback("üîÑ –û–Ω–æ–≤–∏—Ç–∏", b"stats_refresh")]
        ]
        return buttons
# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—ñ
class BotStatisticsHandler:
    def __init__(self):
        self.stats_module = StatisticsModule()
    
    async def handle_start_command(self, event):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        self.stats_module.log_button_click(event.sender_id, "start_command")
        
        welcome_msg = """ü§ñ **–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–ª–æ—Ç—ñ–≤ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤ –£–∫—Ä–∞—ó–Ω–∏ –≤ –ö–∞–Ω–∞–¥—ñ**

üìä –•–æ—á–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!

üîî –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É—é –ø–æ—è–≤—É –Ω–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ —Ç–∞ –∑–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
‚Ä¢ –ü–æ –º—ñ—Å—Ç–∞—Ö —Ç–∞ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–∞—Ö
‚Ä¢ –ü–æ —á–∞—Å—É –ø–æ—è–≤–∏ —Å–ª–æ—Ç—ñ–≤  
‚Ä¢ –ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–æ—Å–ª—É–≥–∞—Ö
‚Ä¢ –ü–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        
        buttons = [
            [Button.callback("üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", b"show_stats")],
            [Button.url("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", "https://t.me/your_help_channel")]
        ]
        
        await event.respond(welcome_msg, buttons=buttons)
    
    async def handle_stats_callback(self, event):
        """–û–±—Ä–æ–±–∫–∞ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        data = event.data.decode()
        
        if data == "show_stats":
            self.stats_module.log_button_click(event.sender_id, "show_stats")
            msg = "üìä **–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**"
            buttons = self.stats_module.get_statistics_buttons()
            await event.edit(msg, buttons=buttons)
            
        elif data.startswith("stats_"):
            period = data.replace("stats_", "")
            self.stats_module.log_button_click(event.sender_id, f"stats_{period}")
            
            if period == "refresh":
                period = "week"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–∏–∂–¥–µ–Ω—å
            
            stats_msg = self.stats_module.get_statistics(period)
            buttons = self.stats_module.get_statistics_buttons()
            
            await event.edit(stats_msg, buttons=buttons)
    
    def log_new_slot_message(self, city, service, slots_count, available_dates, content_hash):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ωov√©ho –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–ª–æ—Ç–∏"""
        return self.stats_module.log_slot_message(city, service, slots_count, available_dates, content_hash)


# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –≤–∞—à–æ—é —ñ—Å–Ω—É—é—á–æ—é —Å–∏—Å—Ç–µ–º–æ—é
def is_processed(msg_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ"""
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM processed WHERE msg_id = ?', (msg_id,))
        return cursor.fetchone() is not None

def is_content_processed_recently(content_hash: str, minutes: int = 30) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É–±–ª—ñ–∫—É–≤–∞–≤—Å—è –Ω–µ—â–æ–¥–∞–≤–Ω–æ"""
    if not content_hash:
        return False
        
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        
        time_limit = datetime.now() - timedelta(minutes=minutes)
        time_limit_str = time_limit.strftime('%Y-%m-%d %H:%M:%S')
        
        cursor.execute('''
            SELECT 1 FROM processed 
            WHERE content_hash = ? 
            AND timestamp > ?
        ''', (content_hash, time_limit_str))
        
        return cursor.fetchone() is not None

def mark_processed_with_stats(msg_id: int, content_hash: str, city: str = None, service: str = None, slots_count: int = None, available_dates: list = None):
    """–ü–æ–∑–Ω–∞—á–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —á–∞—Å –≤ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –ö–∞–Ω–∞–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        canada_tz = pytz.timezone('America/Toronto')
        utc_time = datetime.now(pytz.UTC)
        canada_time = utc_time.astimezone(canada_tz)
        
        cursor.execute('''INSERT OR IGNORE INTO processed 
                      (msg_id, content_hash, city, service, slots_count, available_dates, canada_time) 
                      VALUES (?, ?, ?, ?, ?, ?, ?)''', 
                      (msg_id, content_hash, city, service, slots_count, str(available_dates) if available_dates else None, canada_time.isoformat()))
        conn.commit()