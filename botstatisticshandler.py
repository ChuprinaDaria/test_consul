from collections import defaultdict
from telethon.tl.custom import Button
from db import get_statistics_data

class BotStatisticsHandler:
    def __init__(self):
        pass
    
    async def handle_start_command(self, event):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        welcome_msg = """ü§ñ **–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–ª–æ—Ç—ñ–≤ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤ –£–∫—Ä–∞—ó–Ω–∏ –≤ –ö–∞–Ω–∞–¥—ñ**

üìä **–§—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤
‚Ä¢ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ–ª–∏ —Å–ª–æ—Ç–∏ –∑–∞–π–Ω—è—Ç—ñ
‚Ä¢ –¢–∏—Ö—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞ 5 —Ö–≤ (–Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
‚Ä¢ –ü—Ä–æ—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"""
        
        buttons = [
            [Button.inline("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å", b"stats_7")],
            [Button.inline("üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å", b"stats_30")]
        ]
        
        await event.respond(welcome_msg, buttons=buttons)
    
    async def handle_stats_callback(self, event):
        """–û–±—Ä–æ–±–∫–∞ callback –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        data = event.data.decode()
        
        if data.startswith("stats_"):
            # –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —ñ —Å—Ç–∞—Ä–∏–π —ñ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
            period_str = data.replace("stats_", "")
            
            if period_str == "week":
                days = 7
            elif period_str == "month": 
                days = 30
            elif period_str == "year":
                days = 365
            elif period_str == "refresh":
                days = 7  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            else:
                try:
                    days = int(period_str)
                except ValueError:
                    days = 7  # fallback
            
            stats_msg = self.format_simple_statistics(days)
            
            buttons = [
                [Button.inline("üìä –ó–∞ —Ç–∏–∂–¥–µ–Ω—å", b"stats_7")],
                [Button.inline("üìÜ –ó–∞ –º—ñ—Å—è—Ü—å", b"stats_30")],
                [Button.inline("üîÑ –û–Ω–æ–≤–∏—Ç–∏", f"stats_{days}".encode())]
            ]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º
            try:
                await event.edit(stats_msg, buttons=buttons)
            except Exception as e:
                if "MessageNotModifiedError" in str(e):
                    print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
                    await event.answer("üîÑ –î–∞–Ω—ñ –≤–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ")
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                    await event.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
    
    def format_simple_statistics(self, period_days):
        """–ü—Ä–æ—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ –≥–æ–¥–∏–Ω–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—Ç–∞"""
        from db import get_statistics_data
        from datetime import datetime
        from collections import defaultdict
        import pytz
        
        data = get_statistics_data(period_days)
        
        if not data:
            return f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_days} –¥–Ω—ñ–≤**\n\n‚ùå –î–∞–Ω–∏—Ö –Ω–µ–º–∞—î"
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–∫–∏
        total_messages = len(data)
        total_slots = sum(slots or 0 for _, _, slots, _, _ in data)
        
        city_stats = defaultdict(int)
        service_stats = defaultdict(int)
        city_hours = defaultdict(lambda: defaultdict(int))  # {–º—ñ—Å—Ç–æ: {–≥–æ–¥–∏–Ω–∞: –∫—ñ–ª—å–∫—ñ—Å—Ç—å}}
        
        CANADA_TZ = pytz.timezone('America/Toronto')
        
        for city, service, slots, canada_time_str, timestamp in data:
            if city:
                city_stats[city] += 1
                
                # –û–±—Ä–æ–±–∫–∞ —á–∞—Å—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö
                try:
                    if canada_time_str:
                        if 'T' in canada_time_str:
                            ct = datetime.fromisoformat(canada_time_str.replace('Z', '+00:00'))
                        else:
                            ct = datetime.strptime(canada_time_str, '%Y-%m-%d %H:%M:%S')
                    else:
                        utc_time = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')
                        utc_time = pytz.UTC.localize(utc_time)
                        ct = utc_time.astimezone(CANADA_TZ)
                    
                    city_hours[city][ct.hour] += 1
                except:
                    continue
                    
            if service:
                service_stats[service] += 1
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        msg = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_days} –¥–Ω—ñ–≤**\n\n"
        msg += f"üìà **–í—Å—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:** {total_messages}\n"
        msg += f"üéØ **–í—Å—å–æ–≥–æ —Å–ª–æ—Ç—ñ–≤:** {total_slots}\n"
        msg += f"üìä **–í —Å–µ—Ä–µ–¥–Ω—å–æ–º—É —Å–ª–æ—Ç—ñ–≤ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:** {total_slots/total_messages:.1f}\n\n"
        
        # –¢–æ–ø –º—ñ—Å—Ç –∑ –≥–æ–¥–∏–Ω–∞–º–∏
        msg += "üèôÔ∏è **–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –º—ñ—Å—Ç–∞:**\n"
        sorted_cities = sorted(city_stats.items(), key=lambda x: x[1], reverse=True)[:3]
        
        for i, (city, count) in enumerate(sorted_cities, 1):
            percentage = (count / total_messages) * 100
            msg += f"{i}. **{city}**: {count} —Ä–∞–∑—ñ–≤ ({percentage:.1f}%)\n"
            
            # –¢–æ–ø-3 –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞
            if city in city_hours:
                top_hours = sorted(city_hours[city].items(), key=lambda x: x[1], reverse=True)[:3]
                if top_hours:
                    hours_str = ", ".join([f"{h:02d}:00" for h, _ in top_hours])
                    msg += f"   üïê –ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –≥–æ–¥–∏–Ω–∏: {hours_str}\n"
            msg += "\n"
        
        return msg