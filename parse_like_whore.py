import re
from telethon.tl.custom import Button
import hashlib

def get_city_color(city):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª—ñ—Ä –∫—Ä—É–∂–µ—á–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ –≤ –ö–∞–Ω–∞–¥—ñ"""
    city_colors = {
        '–ï–¥–º–æ–Ω—Ç–æ–Ω—ñ': 'üî¥',
        '–û—Ç—Ç–∞–≤—ñ': 'üü†',     
        '–¢–æ—Ä–æ–Ω—Ç–æ': 'üü°',
        '–ö–∞–Ω–∞–¥—ñ': 'üü¢'  # –¥–ª—è –ü–æ—Å–æ–ª—å—Å—Ç–≤–∞
    }
    
    for city_name, color in city_colors.items():
        if city_name in city:
            return color
    return 'üü¢'

def parse_slot_message(text):
    """–°–ø—Ä–æ—â–µ–Ω–∏–π –ø–∞—Ä—Å–µ—Ä - —Ç—ñ–ª—å–∫–∏ –º—ñ—Å—Ç–æ —Ç–∞ —á–∞—Å–∏"""
    if not text or "–ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!" not in text:
        return None, None, None
    
    # –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ/–ø–æ—Å–æ–ª—å—Å—Ç–≤–æ
    location_match = re.search(r'üî∏ (–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ .+|–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ .+)', text)
    service_match = re.search(r'üî∏ –ü–æ—Å–ª—É–≥–∞: (.+)', text)
    
    # –í—Å—ñ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å–∏
    date_sections = re.findall(r'(\d{2}\.\d{2}\.\d{4}):\s*([0-9:\s]+)', text)
    
    if not (location_match and service_match and date_sections):
        return None, None, None

    location_full = location_match.group(1)
    city = (location_full.replace("–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ ", "")
                         .replace("–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ ", "").strip())
    service = service_match.group(1).strip()
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å–∏
    total_slots = 0
    date_time_info = []
    all_dates = []
    
    for date, times_str in date_sections:
        times = re.findall(r'\d{2}:\d{2}', times_str)
        if times:
            total_slots += len(times)
            all_dates.append(date)
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥–∞—Ç–∏
            times_formatted = " ".join(times)
            date_time_info.append(f"**{date}**: {times_formatted}")
    
    if total_slots == 0:
        return None, None, None
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à –≤–∫–ª—é—á–∞—é—á–∏ —á–∞—Å–∏
    times_for_hash = ";".join([f"{date}:{times_str.strip()}" for date, times_str in date_sections])
    content_hash = hashlib.md5(f"{city}_{service}_{times_for_hash}".encode()).hexdigest()
    
    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - —Ç—ñ–ª—å–∫–∏ –º—ñ—Å—Ç–æ —Ç–∞ —á–∞—Å–∏
    city_color = get_city_color(city)
    times_inline = " ".join(date_time_info)
    
    msg = f"{city_color} **–Ñ —Å–ª–æ—Ç–∏ –≤ {city}!** üïê **–î–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏:** {times_inline}"

    buttons = [Button.url("üîó –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è", "https://id.e-consul.gov.ua/")]
    
    return msg, buttons, content_hash

def parse_slots_gone_message(text: str):
    """–ü–∞—Ä—Å–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–π–Ω—è—Ç—ñ —Å–ª–æ—Ç–∏"""
    if not text or "‚ùå –ù–∞ –∂–∞–ª—å" not in text:
        return None, None, None

    # –®—É–∫–∞—î–º–æ –º—ñ—Å—Ü–µ —Ç–∞ —á–∞—Å
    gone_match = re.search(
        r"‚ùå\s*–ù–∞ –∂–∞–ª—å,\s*—É—Å—ñ\s*—Å–ª–æ—Ç–∏\s*—É\s*(.+?)\s*–≤–∂–µ\s*–∑–∞–π–Ω—è—Ç—ñ!\s*–°–ª–æ—Ç–∏\s*–±—É–ª–∏\s*–¥–æ—Å—Ç—É–ø–Ω—ñ\s*–ø—Ä–æ—Ç—è–≥–æ–º\s*(\d+)\s*(—Ö–≤–∏–ª–∏–Ω|—Å–µ–∫—É–Ω–¥)",
        text, re.IGNORECASE | re.DOTALL
    )
    
    if not gone_match:
        return None, None, None

    full_place = gone_match.group(1).strip()
    time_count = int(gone_match.group(2))
    time_unit = gone_match.group(3)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞
    city = (full_place.replace("–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ ", "")
                     .replace("–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ ", "").strip())
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ö–≤–∏–ª–∏–Ω–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if time_unit == "—Å–µ–∫—É–Ω–¥":
        if time_count < 60:
            time_display = f"{time_count} —Å–µ–∫—É–Ω–¥"
        else:
            minutes = time_count // 60
            seconds = time_count % 60
            time_display = f"{minutes} —Ö–≤ {seconds} —Å–µ–∫" if seconds > 0 else f"{minutes} —Ö–≤–∏–ª–∏–Ω"
    else:
        time_display = f"{time_count} —Ö–≤–∏–ª–∏–Ω"
    
    return full_place, city, time_display

def test_parser():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞"""
    test_messages = [
        # –¢–≤—ñ–π –ø—Ä–∏–∫–ª–∞–¥ –∑ –ü–æ—Å–æ–ª—å—Å—Ç–≤–æ–º –£–∫—Ä–∞—ó–Ω–∏ –≤ –ö–∞–Ω–∞–¥—ñ
        """üÜï –ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!
üî∏ –ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ –ö–∞–Ω–∞–¥—ñ
üî∏ –ü–æ—Å–ª—É–≥–∞: –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–∫–æ—Ä–¥–æ–Ω–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
üìÖ –°–ª–æ—Ç–∏ —è–∫—ñ –±—É–ª–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ:
14.08.2025: 09:00 09:10
üëÄ –ë—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–µ–∂—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.
–°–∫–æ—Ä–æ –º–∏ –≤–∞—Å –ø—Ä–∏–≥–æ–ª–æ–º—à–∏–º–æ!
üî• –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∑–∞—Ç—Ä–∏–º–æ–∫!
–î—è–∫—É—î–º–æ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏!""",
        
        # –ü—Ä–∏–∫–ª–∞–¥ –∑ –ï–¥–º–æ–Ω—Ç–æ–Ω–æ–º
        """üÜï –ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!
üî∏ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ –ï–¥–º–æ–Ω—Ç–æ–Ω—ñ
üî∏ –ü–æ—Å–ª—É–≥–∞: –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–∫–æ—Ä–¥–æ–Ω–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
üìÖ –°–ª–æ—Ç–∏ —è–∫—ñ –±—É–ª–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ:
16.08.2025: 14:00 14:10 14:20
üî• –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∑–∞—Ç—Ä–∏–º–æ–∫!""",
        
        # –ü—Ä–∏–∫–ª–∞–¥ –∑ –∫—ñ–ª—å–∫–æ–º–∞ –¥–∞—Ç–∞–º–∏
        """üÜï –ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!
üî∏ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ –¢–æ—Ä–æ–Ω—Ç–æ
üî∏ –ü–æ—Å–ª—É–≥–∞: –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–∫–æ—Ä–¥–æ–Ω–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
üìÖ –°–ª–æ—Ç–∏ —è–∫—ñ –±—É–ª–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ:
17.08.2025: 11:15 11:25
18.08.2025: 09:30 10:00 10:30
üî• –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∑–∞—Ç—Ä–∏–º–æ–∫!""",
        
        # –ü—Ä–∏–∫–ª–∞–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å
        """‚ùå –ù–∞ –∂–∞–ª—å, —É—Å—ñ —Å–ª–æ—Ç–∏ —É –ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ –ö–∞–Ω–∞–¥—ñ –≤–∂–µ –∑–∞–π–Ω—è—Ç—ñ!
–°–ª–æ—Ç–∏ –±—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º 59 —Å–µ–∫—É–Ω–¥.
üî• –¢—ñ–ª—å–∫–∏ –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º—É—é—Ç—å —Ç–∞–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –î—è–∫—É—î–º–æ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏!"""
    ]

    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    
    for i, test_message in enumerate(test_messages[:3], 1):  # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—à—ñ 3 (—Å–ª–æ—Ç–∏)
        print(f"\nüß™ –¢–ï–°–¢ {i} (—Å–ª–æ—Ç–∏):")
        print("-" * 40)
        result, buttons, content_hash = parse_slot_message(test_message)
        if result:
            print("‚úÖ –£–°–ü–Ü–®–ù–û:")
            print(result)
            print(f"–•–µ—à: {content_hash[:10]}...")
            print(f"–ö–Ω–æ–ø–∫–∏: {[btn.text for btn in buttons]}")
        else:
            print("‚ùå –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û")
        print()
    
    # –¢–µ—Å—Ç—É—î–º–æ "–∑–∞–π–Ω—è—Ç–æ"
    print(f"\nüß™ –¢–ï–°–¢ 4 (–∑–∞–π–Ω—è—Ç–æ):")
    print("-" * 40)
    gone_result = parse_slots_gone_message(test_messages[3])
    if gone_result[0]:
        full_place, city, time_display = gone_result
        print("‚úÖ –£–°–ü–Ü–®–ù–û:")
        print(f"–ü–æ–≤–Ω–µ –º—ñ—Å—Ü–µ: {full_place}")
        print(f"–ú—ñ—Å—Ç–æ: {city}")
        print(f"–ß–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ: {time_display}")
    else:
        print("‚ùå –ù–ï –†–û–ó–ü–Ü–ó–ù–ê–ù–û")
    
    print("\n" + "=" * 60)
    print("üéØ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    test_parser()