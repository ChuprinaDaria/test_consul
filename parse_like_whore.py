import re
from telethon.tl.custom import Button
from datetime import datetime, timedelta
import hashlib

def parse_times_and_calculate_services(times_str):
    """
    –ü–∞—Ä—Å–∏—Ç—å —á–∞—Å–∏ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏
    """
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —á–∞—Å–∏
    times = re.findall(r'\d{2}:\d{2}', times_str)
    if not times:
        return [], {}
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ datetime –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
    time_objects = []
    for time_str in times:
        try:
            time_obj = datetime.strptime(time_str, '%H:%M')
            time_objects.append((time_str, time_obj))
        except ValueError:
            continue
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
    time_objects.sort(key=lambda x: x[1])
    sorted_times = [t[0] for t in time_objects]
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–ª–æ—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–æ—Å–ª—É–≥
    services = {
        'adult': sorted_times.copy(),  # –î–æ—Ä–æ—Å–ª—ñ - –≤—Å—ñ —Å–ª–æ—Ç–∏ (10 —Ö–≤)
        'teen': sorted_times.copy(),   # 12-16 —Ä–æ–∫—ñ–≤ - –≤—Å—ñ —Å–ª–æ—Ç–∏ (10 —Ö–≤)  
        'child': []                    # –î–æ 12 —Ä–æ–∫—ñ–≤ - —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ –º–∞—é—Ç—å 15+ —Ö–≤ —Ä—ñ–∑–Ω–∏—Ü—ñ
    }
    
    # –î–ª—è –¥–∏—Ç—è—á–∏—Ö –ø–∞—Å–ø–æ—Ä—Ç—ñ–≤ –¥–æ 12 —Ä–æ–∫—ñ–≤ (15 —Ö–≤) - —à—É–∫–∞—î–º–æ —Å–ª–æ—Ç–∏ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –ø—Ä–æ–º—ñ–∂–∫–æ–º
    if len(time_objects) > 0:
        # –ü–µ—Ä—à–∏–π —Å–ª–æ—Ç –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        services['child'].append(time_objects[0][0])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—à—ñ —Å–ª–æ—Ç–∏
        last_child_time = time_objects[0][1]
        
        for time_str, time_obj in time_objects[1:]:
            # –Ø–∫—â–æ –º—ñ–∂ —Å–ª–æ—Ç–∞–º–∏ >= 15 —Ö–≤–∏–ª–∏–Ω, –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è
            time_diff = (time_obj - last_child_time).total_seconds() / 60
            if time_diff >= 15:
                services['child'].append(time_str)
                last_child_time = time_obj
    
    return sorted_times, services

def generate_content_hash(location, service, date_sections):
    """
    –ì–µ–Ω–µ—Ä—É—î —Ö–µ—à –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    """
    content = f"{location}_{service}_{'_'.join([f'{date}:{times}' for date, times in date_sections])}"
    return hashlib.md5(content.encode()).hexdigest()

def parse_slot_message(text):
    """
    –ü–∞—Ä—Å–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–ª–æ—Ç–∏ –≤—ñ–¥ ConsulateUkraineBot
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–Ω–æ–ø–∫–∏ —Ç–∞ —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É
    """
    if not text or "–ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!" not in text:
        return None, None, None
    
    # –®—É–∫–∞—î–º–æ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ/–ø–æ—Å–æ–ª—å—Å—Ç–≤–æ
    location = re.search(r'üî∏ (–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ .+|–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ .+)', text)
    
    # –®—É–∫–∞—î–º–æ –ø–æ—Å–ª—É–≥—É
    service = re.search(r'üî∏ –ü–æ—Å–ª—É–≥–∞: (.+)', text)
    
    # –®—É–∫–∞—î–º–æ –≤—Å—ñ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å–∏ (–ø–æ–ª—ñ–ø—à–µ–Ω–∏–π regex)
    date_sections = re.findall(r'üìÖ –°–ª–æ—Ç–∏ —è–∫—ñ –±—É–ª–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ:\s*(\d{2}\.\d{2}\.\d{4}):(.*?)(?=üìÖ|‚ö†Ô∏è|üî•|$)', text, re.DOTALL)
    
    if not (location and service and date_sections):
        print("üîç Debug: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏")
        print(f"Location: {bool(location)}")
        print(f"Service: {bool(service)}")
        print(f"Date sections: {len(date_sections)}")
        return None, None, None

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    content_hash = generate_content_hash(location.group(1), service.group(1), date_sections)

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞
    city = location.group(1).replace("–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ –ö–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ ", "").replace("–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ ", "").strip()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–ª—É–≥—É
    poslyga = service.group(1).strip()
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å–∏
    date_info = []
    all_dates = []
    has_child_services = False
    child_services_info = []
    
    for date, times_text in date_sections:
        # –ü–∞—Ä—Å–∏–º–æ —á–∞—Å–∏ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ—Å–ª—É–≥–∏
        sorted_times, services = parse_times_and_calculate_services(times_text)
        
        if sorted_times:
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∞—Ç—É
            date_info.append(f"üìÜ **{date}**: `{', '.join(sorted_times)}`")
            all_dates.append(date.replace('.', '_'))
            
            # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∏—Ç—è—á—ñ –ø–æ—Å–ª—É–≥–∏
            if services['teen'] or services['child']:
                has_child_services = True
                
                if services['teen']:
                    child_services_info.append(f"üîπ **–ü–∞—Å–ø–æ—Ä—Ç –¥–∏—Ç–∏–Ω—ñ 12-16 —Ä–æ–∫—ñ–≤** (10 —Ö–≤):")
                    child_services_info.append(f"   ‚Ä¢ {date}: {', '.join(services['teen'])}")
                
                if services['child']:
                    child_services_info.append(f"üîπ **–ü–∞—Å–ø–æ—Ä—Ç –¥–∏—Ç–∏–Ω—ñ –¥–æ 12 —Ä–æ–∫—ñ–≤** (15 —Ö–≤):")
                    child_services_info.append(f"   ‚Ä¢ {date}: {', '.join(services['child'])}")
    
    if not date_info:
        print("üîç Debug: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö —á–∞—Å—ñ–≤")
        return None, None, None
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    msg = f"""üü¢ –î–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏ –≤ {city}!

üìå –ü–æ—Å–ª—É–≥–∞: {poslyga}

üîπ **–î–æ—Ä–æ—Å–ª—ñ (10—Ö–≤):** {'; '.join([f"{date}: {', '.join(re.findall(r'\\d{2}:\\d{2}', times_text))}" for date, times_text in date_sections])}"""

    # –î–æ–¥–∞—î–º–æ –¥–∏—Ç—è—á—ñ –ø–æ—Å–ª—É–≥–∏ —è–∫—â–æ —î (–∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º)
    if has_child_services:
        # –ó–±–∏—Ä–∞—î–º–æ –¥–∏—Ç—è—á—ñ —Å–ª–æ—Ç–∏
        teen_slots = []
        child_slots = []
        
        for date, times_text in date_sections:
            sorted_times, services = parse_times_and_calculate_services(times_text)
            if services['teen']:
                teen_slots.append(f"{date}: {', '.join(services['teen'])}")
            if services['child']:
                child_slots.append(f"{date}: {', '.join(services['child'])}")
        
        # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ –¥–ª—è –≤—ñ–¥—Å—Ç—É–ø—É
        msg += "\n\n"
        
        if teen_slots:
            msg += f"–ó–∞–ø–∏—Å–∏ –¥—ñ—Ç—è–º 12-16 —Ä–æ–∫—ñ–≤ (10—Ö–≤): {'; '.join(teen_slots)}\n"
        if child_slots:
            msg += f"–î–æ 12 —Ä–æ–∫—ñ–≤ (15—Ö–≤): {'; '.join(child_slots)}"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å–∞–π—Ç
    buttons = [Button.url("üîó –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Å–ª–æ—Ç", "https://id.e-consul.gov.ua/")]
    
    return msg, buttons, content_hash


def test_parser():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞"""
    test_message = """üÜï –ó'—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ñ —Å–ª–æ—Ç–∏!
üî∏ –ü–æ—Å–æ–ª—å—Å—Ç–≤–æ –£–∫—Ä–∞—ó–Ω–∏ –≤ –ö–∞–Ω–∞–¥—ñ
üî∏ –ü–æ—Å–ª—É–≥–∞: –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–∫–æ—Ä–¥–æ–Ω–Ω–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
üìÖ –°–ª–æ—Ç–∏ —è–∫—ñ –±—É–ª–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ:
15.01.2026: 10:30
üî• –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∑–∞—Ç—Ä–∏–º–æ–∫! –î—è–∫—É—î–º–æ –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏!"""

    print("üß™ –¢–ï–°–¢ - –ö–∞–Ω–∞–¥–∞:")
    print("=" * 60)
    result, buttons, content_hash = parse_slot_message(test_message)
    if result:
        print(result)
        print(f"\nContent hash: {content_hash}")
    else:
        print("‚ùå –¢–µ—Å—Ç –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π")

if __name__ == "__main__":
    test_parser()